Index: camera_geometric_calibration/image_enhancement_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Source:\r\n# https://stackoverflow.com/questions/4993082/how-can-i-sharpen-an-image-in-opencv\r\nimport glob\r\n\r\nimport cv2 as cv\r\n\r\nmanual_images = glob.glob('images/manual/*.jpg')\r\nfor img_path in manual_images:\r\n    img = cv.imread(img_path)\r\n    img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)\r\n\r\n    smoothed = cv.GaussianBlur(img, (0, 0), 3)\r\n\r\n    improved = cv.addWeighted(img, 2, smoothed, -1, 0) #params alpha/beta/gamma\r\n\r\n    cv.imshow('original', img)\r\n    ret, ogcorners = cv.findChessboardCorners(img, (9, 6), None)\r\n    print(\"original returns \", ret)\r\n\r\n    cv.imshow('smoothed', smoothed)\r\n    ret, smcorners = cv.findChessboardCorners(smoothed, (9, 6), None)\r\n    print(\"smoothed returns \", ret)\r\n\r\n    cv.imshow('improved', improved)\r\n    ret, imcorners = cv.findChessboardCorners(improved, (9, 6), None)\r\n    print(\"improved returns \", ret)\r\n\r\ncv.waitKey(100000)\r\ncv.destroyAllWindows()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/camera_geometric_calibration/image_enhancement_test.py b/camera_geometric_calibration/image_enhancement_test.py
--- a/camera_geometric_calibration/image_enhancement_test.py	(revision e9be2a9ac165b43c5980acb72bf1fa99b57dce0c)
+++ b/camera_geometric_calibration/image_enhancement_test.py	(date 1676555100718)
@@ -4,7 +4,7 @@
 
 import cv2 as cv
 
-manual_images = glob.glob('images/manual/*.jpg')
+manual_images = glob.glob('images/automatic/*.jpg')
 for img_path in manual_images:
     img = cv.imread(img_path)
     img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
@@ -13,17 +13,19 @@
 
     improved = cv.addWeighted(img, 2, smoothed, -1, 0) #params alpha/beta/gamma
 
-    cv.imshow('original', img)
-    ret, ogcorners = cv.findChessboardCorners(img, (9, 6), None)
-    print("original returns ", ret)
-
-    cv.imshow('smoothed', smoothed)
-    ret, smcorners = cv.findChessboardCorners(smoothed, (9, 6), None)
-    print("smoothed returns ", ret)
-
-    cv.imshow('improved', improved)
-    ret, imcorners = cv.findChessboardCorners(improved, (9, 6), None)
-    print("improved returns ", ret)
+    ret1, ogcorners = cv.findChessboardCorners(img, (9, 6), None)
+    #print("original returns ", ret1)
+    ret2, smcorners = cv.findChessboardCorners(smoothed, (9, 6), None)
+    #print("smoothed returns ", ret2)
+    ret3, imcorners = cv.findChessboardCorners(improved, (9, 6), None)
+    #print("improved returns ", ret3, "\n\n")
+
+    if ret1 != ret3:
+        print("original returns ", ret1)
+        print("improved returns ", ret3, "\n\n")
+        cv.imshow('original', img)
+        cv.imshow('smoothed', smoothed)
+        cv.imshow('improved', improved)
 
 cv.waitKey(100000)
 cv.destroyAllWindows()
Index: camera_geometric_calibration/online_phase.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import cv2 as cv\r\nimport numpy as np\r\nimport glob\r\n\r\n\r\n# From slides:\r\n# Workflow online:\r\n# • Read an image/camera frame\r\n# • Draw a box on a detected chessboard in the right perspective\r\n\r\ndef show_image(img):\r\n    cv.namedWindow(image_name, cv.WINDOW_KEEPRATIO)\r\n    cv.imshow(image_name, img)\r\n    cv.resizeWindow(image_name, 1900, 1080)\r\n\r\n\r\ndef get_point_tuple(pts):\r\n    return tuple(map(int, pts.ravel()))\r\n\r\n\r\n# take the test image and draw the world 3D axes (XYZ) with the origin at the center\r\n# of the world coordinates, using the estimated camera parameters\r\ndef draw_axes_on_image(img, imgpts, fixedOrigin):\r\n    # Experiment with the projected origin and the fixed origin\r\n\r\n    origin = get_point_tuple(imgpts[0])\r\n    # origin = fixedOrigin\r\n\r\n    imgpx = get_point_tuple(imgpts[1])\r\n    imgpy = get_point_tuple(imgpts[2])\r\n    imgpz = get_point_tuple(imgpts[3])\r\n\r\n    img = cv.line(img, origin, imgpx, (255, 0, 0), 5)\r\n    img = cv.line(img, origin, imgpy, (0, 255, 0), 5)\r\n    img = cv.line(img, origin, imgpz, (0, 0, 255), 5)\r\n\r\n    return img\r\n\r\n\r\n# draw a cube which is located at the origin of the world coordinates.\r\n# You can get bonus points for doing this in real time using your webcam\r\ndef draw_cube_on_image(img, imgpts, fixedOrigin):\r\n    # maybe use fixed origin aswell\r\n    imgpts = np.array(list(map(get_point_tuple, imgpts)))\r\n    img = cv.drawContours(img, [imgpts[:4]], -1, (120, 120, 0), 3)\r\n    # draw pillars in blue color\r\n    for i, j in zip(range(4), range(4, 8)):\r\n        img = cv.line(img, tuple(imgpts[i]), tuple(imgpts[j]), (120, 120, 0), 3)\r\n    img = cv.drawContours(img, [imgpts[4:]], -1, (120, 120, 0), 3)\r\n    return img\r\n\r\n\r\ndef handle_image(img, estimated_camera_params):\r\n    axsize = 6\r\n    cubesize = 4\r\n\r\n    axis = np.float32([[0, 0, 0], [axsize, 0, 0], [0, axsize, 0], [0, 0, -axsize]])\r\n    cube = np.float32([[0, 0, 0], [cubesize, 0, 0], [cubesize, cubesize, 0], [0, cubesize, 0], [0, 0, -cubesize],\r\n                       [cubesize, 0, -cubesize], [cubesize, cubesize, -cubesize], [0, cubesize, -cubesize]])\r\n\r\n    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)\r\n    ret, corners = cv.findChessboardCorners(gray, (num_cols, num_rows), None)\r\n\r\n    if ret == True:\r\n        corners2 = cv.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)\r\n        # Find the rotation and translation vectors.\r\n        ret, rvec, tvec = cv.solvePnP(objp, corners2, estimated_camera_params['mtx'], estimated_camera_params['dist'])\r\n        # project 3D points to image plane\r\n        axpts, jac = cv.projectPoints(axis, rvec, tvec, estimated_camera_params['mtx'],\r\n                                      estimated_camera_params['dist'])\r\n        cubepts, _ = cv.projectPoints(cube, rvec, tvec, estimated_camera_params['mtx'], estimated_camera_params['dist'])\r\n        img = draw_axes_on_image(img, axpts, get_point_tuple(corners2[0]))\r\n        img = draw_cube_on_image(img, cubepts, get_point_tuple(corners2[0]))\r\n        show_image(img)\r\n        cv.waitKey(1)\r\n\r\n\r\ndef draw_on_webcam(estimated_camera_params):\r\n    cam = cv.VideoCapture(0)\r\n\r\n    while (True):\r\n        ret, frame = cam.read()\r\n        show_image(frame)\r\n        handle_image(frame, estimated_camera_params)\r\n\r\n        key = cv.waitKey(1)\r\n\r\n        if (key != -1):\r\n            break\r\n\r\n    return\r\n\r\n\r\ndef draw_on_image(estimated_camera_params):\r\n    test_image = cv.imread(glob.glob('images/test_image.jpg')[0])\r\n    handle_image(test_image, estimated_camera_params)\r\n\r\n\r\ndef execute_online_phase(estimated_camera_params):\r\n    # draw_on_image(estimated_camera_params)\r\n    draw_on_webcam(estimated_camera_params)\r\n\r\n    cv.waitKey(0)\r\n\r\n\r\ndef set_config(c):\r\n    global criteria, num_cols, num_rows, objp, image_name\r\n    criteria = c['criteria']\r\n    num_cols = c['num_cols']\r\n    num_rows = c['num_rows']\r\n    image_name = c['image_name']\r\n    objp = c['objp']\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/camera_geometric_calibration/online_phase.py b/camera_geometric_calibration/online_phase.py
--- a/camera_geometric_calibration/online_phase.py	(revision e9be2a9ac165b43c5980acb72bf1fa99b57dce0c)
+++ b/camera_geometric_calibration/online_phase.py	(date 1676552906959)
@@ -97,8 +97,8 @@
 
 
 def execute_online_phase(estimated_camera_params):
-    # draw_on_image(estimated_camera_params)
-    draw_on_webcam(estimated_camera_params)
+    draw_on_image(estimated_camera_params)
+    #draw_on_webcam(estimated_camera_params)
 
     cv.waitKey(0)
 
Index: camera_geometric_calibration/offline_phase.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport cv2 as cv\r\nimport glob\r\n\r\n# From slides:\r\n# Workflow offline:\r\n# • Print checkerboard on piece of paper (or take a real one)\r\n# • Measure the stride length and fill it in\r\n# • Take a number of pictures with the camera\r\n# • Determine camera parameters using OpenCV functions (browse!)\r\n# • Now your camera is calibrated\r\n\r\n# Arrays to store object points and image points from all the images.\r\nobjpoints = []  # 3d point in real world space\r\nimgpoints = []  # 2d points in image plane.\r\n\r\n\"\"\"\r\nCreate window with provided image\r\n\"\"\"\r\ndef show_image(img, title='Current Image'):\r\n    cv.namedWindow(image_name, cv.WINDOW_KEEPRATIO)\r\n    cv.imshow(image_name, img)\r\n    cv.setWindowTitle(image_name, title)\r\n    cv.resizeWindow(image_name, 1900, 1080)\r\n\r\n\"\"\"\r\nDraw and show chessboardcorners based on found corners in image\r\n\"\"\"\r\ndef draw_chessboard_corners(corners, current_image, time):\r\n    cv.drawChessboardCorners(current_image, (num_cols, num_rows), corners, True)\r\n    show_image(current_image)\r\n    cv.waitKey(time)\r\n\r\n\"\"\"\r\nhandle click event: if left mouse button is clicked on image, add coordinates of mouse to cornerspoint\r\n\"\"\"\r\ndef click_event(event, x, y, flags, params):\r\n    current_image = params\r\n    if event == cv.EVENT_LBUTTONDOWN and len(corner_points) < 4:\r\n        print('new cornerpoint added: (' + str(x) + ', ' + str(y) + ')')\r\n        corner_points.append([x, y])\r\n\r\n        cv.circle(current_image, (x, y), radius=6, color=(0, 0, 255), thickness=1)\r\n        show_image(current_image)\r\n\r\n\r\n\"\"\"\r\nDetermine coordinates of next corner based on current coordinates and amount of columns/rows\r\n\"\"\"\r\ndef direction_step(p1, p2, num_steps):\r\n    x1, y1 = p1\r\n    x2, y2 = p2\r\n    return (x2 - x1) / num_steps, (y2 - y1) / num_steps\r\n\r\n\r\ndef interpolate_four_corners(four_corners):\r\n    upper_left_cor, upper_right_cor, lower_left_cor, lower_right_cor = four_corners\r\n    ur_corx, ur_cory = upper_right_cor\r\n    ul_corx, ul_cory = upper_left_cor\r\n\r\n    # direction is also scaled to stepsize.\r\n    rrow_dirx, rrow_diry = direction_step(upper_right_cor, lower_right_cor, (num_rows - 1))\r\n    lrow_dirx, lrow_diry = direction_step(upper_left_cor, lower_left_cor, (num_rows - 1))\r\n\r\n    corners = np.zeros((num_rows * num_cols, 1, 2))\r\n    index = 0\r\n\r\n    for i in range(num_rows):\r\n        rrowptx = ur_corx + i * rrow_dirx\r\n        rrowpty = ur_cory + i * rrow_diry\r\n        lrowptx = ul_corx + i * lrow_dirx\r\n        lrowpty = ul_cory + i * lrow_diry\r\n        col_dirx, col_diry = direction_step((lrowptx, lrowpty), (rrowptx, rrowpty), (num_cols - 1))\r\n        for j in range(num_cols):\r\n            corners[index] = [lrowptx + j * col_dirx, lrowpty + j * col_diry]\r\n            index += 1\r\n    return np.float32(corners)\r\n\r\n\"\"\"\r\nshow image, wait for 4 user-clicks which indicate the corners of the chessboard. \r\nif 4 corners are specified, \r\n\"\"\"\r\ndef determine_points_mannually(gray):\r\n    show_image(gray, title=\"Choose points in Z pattern starting at the upper left\")\r\n    cv.setMouseCallback(image_name, click_event, gray)\r\n\r\n    while 1:\r\n        cv.waitKey(0)\r\n        count_points = len(corner_points)\r\n\r\n        if count_points == 4:\r\n            return interpolate_four_corners(corner_points)\r\n        else:\r\n            print('Only ' + str(count_points) + ' added, please add ' + str(4 - count_points) + ' more')\r\n\r\n\r\ndef handle_image(img):\r\n    global corner_points\r\n\r\n    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)\r\n    smoothed = cv.GaussianBlur(gray, (0, 0), 3)\r\n    improved_gray = cv.addWeighted(gray, 2, smoothed, -1, 0)  # params alpha/beta/gamma\r\n\r\n    # Find the chess board corners\r\n    ret, corners = cv.findChessboardCorners(improved_gray, (num_cols, num_rows), None)\r\n    time = 50\r\n\r\n    # If found, add object points, image points (after refining them)\r\n    if ret == False:\r\n        corners = determine_points_mannually(improved_gray)\r\n        time = 2000\r\n\r\n    improved_corners = cv.cornerSubPix(improved_gray, corners, (3, 3), (-1, -1), criteria)\r\n    # improved_corners = corners\r\n    draw_chessboard_corners(improved_corners, img, time)\r\n    \r\n    objpoints.append(objp)\r\n    imgpoints.append(improved_corners)\r\n    corner_points = []\r\n\r\n\r\ndef calibrate_on_images(images):\r\n    for img_path in images:\r\n        current_image = cv.imread(img_path)\r\n        handle_image(current_image)\r\n\r\n    ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, current_image.shape[0:2][::-1], None, None)\r\n\r\n    cv.destroyAllWindows()\r\n\r\n    return {'ret': ret, 'mtx': mtx, 'dist': dist}\r\n\r\n\r\n# Run 1: use all training images (including the images with manually provided corner points)\r\ndef phase_1():\r\n    auto_images = glob.glob('images/automatic/*.jpg')\r\n    manual_images = glob.glob('images/manual/*.jpg')\r\n    all_images = auto_images + manual_images\r\n\r\n    return calibrate_on_images(all_images)\r\n\r\n\r\n# Run 2:  use only ten images for which corner points were found automatically\r\ndef phase_2():\r\n    auto_images = glob.glob('images/test/*.jpg')\r\n    return calibrate_on_images(auto_images)\r\n\r\n\r\n# Run 3: use only five out of the ten images in Run 2. In each run, you will calibrate the camera\r\ndef phase_3():\r\n    auto_images = glob.glob('images/automatic/*.jpg')[:5]\r\n\r\n    return calibrate_on_images(auto_images)\r\n\r\n\r\n# Execute all runs in order and return list of params to main\r\ndef execute_offline_phase():\r\n    results = phase_1()\r\n\r\n    print(results['mtx'])\r\n    print(results['ret'])\r\n\r\n    return results\r\n\r\n\r\ndef set_config(c):\r\n    global criteria, num_cols, num_rows, objp, image_name, corner_points\r\n    criteria = c['criteria']\r\n    num_cols = c['num_cols']\r\n    num_rows = c['num_rows']\r\n    image_name = c['image_name']\r\n    objp = c['objp']\r\n    corner_points = []\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/camera_geometric_calibration/offline_phase.py b/camera_geometric_calibration/offline_phase.py
--- a/camera_geometric_calibration/offline_phase.py	(revision e9be2a9ac165b43c5980acb72bf1fa99b57dce0c)
+++ b/camera_geometric_calibration/offline_phase.py	(date 1676553695734)
@@ -17,7 +17,7 @@
 """
 Create window with provided image
 """
-def show_image(img, title='Current Image'):
+def show_image(img, title="Choose points in Z pattern starting at the bottom right"):
     cv.namedWindow(image_name, cv.WINDOW_KEEPRATIO)
     cv.imshow(image_name, img)
     cv.setWindowTitle(image_name, title)
@@ -81,7 +81,7 @@
 if 4 corners are specified, 
 """
 def determine_points_mannually(gray):
-    show_image(gray, title="Choose points in Z pattern starting at the upper left")
+    show_image(gray, title="Choose points in Z pattern starting at the bottom right")
     cv.setMouseCallback(image_name, click_event, gray)
 
     while 1:
@@ -108,7 +108,7 @@
     # If found, add object points, image points (after refining them)
     if ret == False:
         corners = determine_points_mannually(improved_gray)
-        time = 2000
+        time = 1000000
 
     improved_corners = cv.cornerSubPix(improved_gray, corners, (3, 3), (-1, -1), criteria)
     # improved_corners = corners
@@ -142,7 +142,7 @@
 
 # Run 2:  use only ten images for which corner points were found automatically
 def phase_2():
-    auto_images = glob.glob('images/test/*.jpg')
+    auto_images = glob.glob('images/automatic/*.jpg')[:10]
     return calibrate_on_images(auto_images)
 
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5e0f08bd-db32-4723-bd75-82042f88900f\" name=\"Changes\" comment=\"new images\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2LokqYNCHDCcCF1qH5mhXnFxNZC\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"last_opened_file_path\": \"C:/Users/fedor/Desktop/Computer Vision/computer_vision/camera_geometric_calibration/main.py\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"computer_vision\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\fedor\\anaconda3\\python.exe\" />\r\n      <option name=\"SDK_NAME\" value=\"Python 3.9\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/camera_geometric_calibration\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/camera_geometric_calibration/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5e0f08bd-db32-4723-bd75-82042f88900f\" name=\"Changes\" comment=\"\" />\r\n      <created>1676545016013</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1676545016013</updated>\r\n      <workItem from=\"1676545017226\" duration=\"6222000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"renamed gray to improved_gray\">\r\n      <created>1676549336574</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676549336574</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"general improvements\">\r\n      <created>1676552116339</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676552116339</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"new images\">\r\n      <created>1676552771362</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676552771362</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"renamed gray to improved_gray\" />\r\n    <MESSAGE value=\"general improvements\" />\r\n    <MESSAGE value=\"new images\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"new images\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/camera_geometric_calibration/offline_phase.py</url>\r\n          <line>126</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/computer_vision$online_phase.coverage\" NAME=\"online_phase Coverage Results\" MODIFIED=\"1676387986290\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/camera_geometric_calibration\" />\r\n    <SUITE FILE_PATH=\"coverage/computer_vision$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1676552780729\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/camera_geometric_calibration\" />\r\n    <SUITE FILE_PATH=\"coverage/computer_vision$image_enhancement_test.coverage\" NAME=\"image_enhancement_test Coverage Results\" MODIFIED=\"1676547921218\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/camera_geometric_calibration\" />\r\n    <SUITE FILE_PATH=\"coverage/computer_vision$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1676469203670\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/camera_geometric_calibration\" />\r\n    <SUITE FILE_PATH=\"coverage/computer_vision$offline_phase.coverage\" NAME=\"offline_phase Coverage Results\" MODIFIED=\"1676548468411\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/camera_geometric_calibration\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e9be2a9ac165b43c5980acb72bf1fa99b57dce0c)
+++ b/.idea/workspace.xml	(date 1676555630881)
@@ -4,7 +4,16 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5e0f08bd-db32-4723-bd75-82042f88900f" name="Changes" comment="new images" />
+    <list default="true" id="5e0f08bd-db32-4723-bd75-82042f88900f" name="Changes" comment="fixed error">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/camera_geometric_calibration/image_enhancement_test.py" beforeDir="false" afterPath="$PROJECT_DIR$/camera_geometric_calibration/image_enhancement_test.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/camera_geometric_calibration/offline_phase.py" beforeDir="false" afterPath="$PROJECT_DIR$/camera_geometric_calibration/offline_phase.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/camera_geometric_calibration/online_phase.py" beforeDir="false" afterPath="$PROJECT_DIR$/camera_geometric_calibration/online_phase.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/camera_geometric_calibration/result_phase_1.png" beforeDir="false" afterPath="$PROJECT_DIR$/camera_geometric_calibration/result_phase_1.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/camera_geometric_calibration/result_phase_2.png" beforeDir="false" afterPath="$PROJECT_DIR$/camera_geometric_calibration/result_phase_2.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/camera_geometric_calibration/result_phase_3.png" beforeDir="false" afterPath="$PROJECT_DIR$/camera_geometric_calibration/result_phase_3.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/camera_geometric_calibration/test_image.jpg" beforeDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -74,7 +83,7 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1676545016013</updated>
-      <workItem from="1676545017226" duration="6222000" />
+      <workItem from="1676545017226" duration="9055000" />
     </task>
     <task id="LOCAL-00001" summary="renamed gray to improved_gray">
       <created>1676549336574</created>
@@ -97,7 +106,14 @@
       <option name="project" value="LOCAL" />
       <updated>1676552771362</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="fixed error">
+      <created>1676552834270</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1676552834270</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -107,7 +123,8 @@
     <MESSAGE value="renamed gray to improved_gray" />
     <MESSAGE value="general improvements" />
     <MESSAGE value="new images" />
-    <option name="LAST_COMMIT_MESSAGE" value="new images" />
+    <MESSAGE value="fixed error" />
+    <option name="LAST_COMMIT_MESSAGE" value="fixed error" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
@@ -122,8 +139,8 @@
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/computer_vision$online_phase.coverage" NAME="online_phase Coverage Results" MODIFIED="1676387986290" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/camera_geometric_calibration" />
-    <SUITE FILE_PATH="coverage/computer_vision$main.coverage" NAME="main Coverage Results" MODIFIED="1676552780729" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/camera_geometric_calibration" />
-    <SUITE FILE_PATH="coverage/computer_vision$image_enhancement_test.coverage" NAME="image_enhancement_test Coverage Results" MODIFIED="1676547921218" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/camera_geometric_calibration" />
+    <SUITE FILE_PATH="coverage/computer_vision$main.coverage" NAME="main Coverage Results" MODIFIED="1676554602811" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/camera_geometric_calibration" />
+    <SUITE FILE_PATH="coverage/computer_vision$image_enhancement_test.coverage" NAME="image_enhancement_test Coverage Results" MODIFIED="1676555100732" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/camera_geometric_calibration" />
     <SUITE FILE_PATH="coverage/computer_vision$.coverage" NAME=" Coverage Results" MODIFIED="1676469203670" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/camera_geometric_calibration" />
     <SUITE FILE_PATH="coverage/computer_vision$offline_phase.coverage" NAME="offline_phase Coverage Results" MODIFIED="1676548468411" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/camera_geometric_calibration" />
   </component>
